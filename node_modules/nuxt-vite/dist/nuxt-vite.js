'use strict';

const upath = require('upath');
const semver = require('semver');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

const semver__default = /*#__PURE__*/_interopDefaultLegacy(semver);

var name = "nuxt-vite";
var version = "0.0.22";

function nuxtVite() {
  const {nuxt} = this;
  if (!nuxt.options.dev) {
    return;
  }
  const minVersion = "2.15.2";
  const currentVersion = nuxt.constructor.version || "0.0.0";
  if (semver__default['default'].lt(nuxt.constructor.version, minVersion)) {
    console.warn(`disabling nuxt-vite since nuxt >= ${minVersion} is required (curret version: ${currentVersion})`);
    return;
  }
  nuxt.options.cli.badgeMessages.push(`\u26A1  Vite Mode Enabled (v${version})`);
  console.log("\u{1F9EA}  Vite mode is experimental and many nuxt modules are still incompatible\n", "   If found a bug, please report via https://github.com/nuxt/vite/issues with a minimal reproduction");
  nuxt.options.build.loadingScreen = false;
  nuxt.options.build.indicator = false;
  nuxt.options._modules = nuxt.options._modules.filter((m) => !(Array.isArray(m) && m[0] === "@nuxt/loading-screen"));
  if (nuxt.options.store) {
    this.addTemplate({
      src: upath.resolve(__dirname, "./runtime/templates", "store.js"),
      fileName: "store.js"
    });
  }
  this.addTemplate({
    src: upath.resolve(__dirname, "./runtime/templates", "middleware.js"),
    fileName: "middleware.js"
  });
  nuxt.hook("builder:prepared", async (builder) => {
    builder.bundleBuilder.close();
    delete builder.bundleBuilder;
    const {ViteBuilder} = await Promise.resolve().then(function () { return require('./nuxt-vite.js-vite.js'); });
    builder.bundleBuilder = new ViteBuilder(builder);
  });
}
nuxtVite.meta = {name, version};

module.exports = nuxtVite;
